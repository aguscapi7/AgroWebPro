@model AgroWebPro.Web.Models.TerrenoModels
@using AgroWebPro.Utilitarios;
@{
    ViewBag.Title = "Terrenos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/leaflet.css" rel="stylesheet" />
<link href="~/Content/leaflet.draw.css" rel="stylesheet" />
<link href="~/Content/leaflet.toolbar.css" rel="stylesheet" />
<link href="~/Content/leaflet.draw-toolbar.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/leaflet-src.js"></script>
<script src="~/Scripts/leaflet.toolbar-src.js"></script>
<script src="~/Scripts/leaflet.draw-src.js"></script>
<script src="~/Scripts/leaflet.draw-toolbar.js"></script>

<link href="~/Content/bootstrap-table.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-table.js"></script>
<link href="~/Content/sweetalert.css" rel="stylesheet" />
<script src="~/Scripts/sweetalert.js"></script>
<script src="~/Scripts/bootstrap-table-locale-all.min.js"></script>

@using (Html.BeginForm("Mantenimiento", "Terreno", FormMethod.Post, new { id = "formTerreno", role = "form", @data_toggle = "validator" }))
{
    @Html.AntiForgeryToken();
    @Html.ValidationSummary(true);
    <div class="form-group hidden" id="divMantenimiento">
        <h2 id="tituloMantenimiento">Agregar terreno</h2>
        <input id="hdnIdTerreno" type="hidden"/>
        <div class="row form-group">
            <div class="col-md-6">
                @Html.LabelFor(model => model.nombreTerreno)
                @Html.TextBoxFor(model => model.nombreTerreno, new { @id = "txtNombreTerreno", @class = "form-control", @placeholder = "Nombre" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.idCultivo)<br />
                @Html.DropDownListFor(model => model.idCultivo, new SelectList(Model.listaCultivosEmpresa, "idCultivo", "nombreCultivo"), new { @id = "ddlCultivos", @class = "form-control", @required = "required" })
            </div>
        </div>
        
        <div class="row form-group">
            <div class="col-md-12">
                @Html.LabelFor(model => model.descripcionTerreno)
                @Html.TextAreaFor(model => model.descripcionTerreno, new { @id = "txtDescripcionTerreno", @class = "form-control", @placeholder = "Descripción" })
            </div>
        </div>
        @Html.TextBoxFor(model => model.actualizarCoordenadas, new { @id = "hdnActualizarCoordenadas", @class = "form-control hidden" })
        @Html.TextBoxFor(model => model.listaCoordenadas, new { @id = "hdnListaCoordenadas", @class = "form-control hidden" })

        <div id="map" style="height:580px;"></div>
        <br />
        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                <button id="btnEditar" name="btnEditar" class="btn btn-primary pull-right btn-guardar hidden" disabled type="submit">Editar&nbsp;<span><i class="fa fa-refresh"></i></span></button>
                <button id="btnGuardar" name="btnGuardar" class="btn btn-primary pull-right btn-guardar" value="btnGuardar" disabled type="submit">Guardar&nbsp;<span><i class="fa fa-plus"></i></span></button>
                <button class="btn btn-danger pull-right" id="btnCancelar" type="button" onclick="Cancelar()">Cancelar</button>
            </div>
        </div>
    </div>
}
<div class="form-group" id="divTablaTerrenos">
    <h2>Listado de terrenos</h2>
    <div class="row">
        <div class="col-md-12"><button class="btn btn-orange" onclick="MostrarDivMantenimiento()">Agregar terreno&nbsp;<span class="fa fa-plus"></span></button></div>
        <br />
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="table-responsive">
                <table class="table table-sm table-hover" data-show-toggle="true" data-search="true"
                       data-show-export="true"
                       data-detail-formatter="detailFormatter"
                       data-minimum-count-columns="2"
                       data-show-pagination-switch="true"
                       data-pagination="true"
                       data-page-list="[10, 25, 50, 100, ALL]"
                       data-locale="es-CR">
                    <thead class="thead-default">
                        <tr>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Cultivo</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.listaTerrenosEmpresa != null && Model.listaTerrenosEmpresa.Count() > 0)
                        {
                            foreach (var itemTerreno in Model.listaTerrenosEmpresa)
                            {
                                <tr>
                                    <td>@itemTerreno.nombreTerreno</td>
                                    <td>@itemTerreno.descripcionTerreno</td>
                                    <td>@itemTerreno.nombreCultivo</td>
                                    <td>
                                        <button class="btn btn-danger" onclick="EliminarTerrenoPaso1('@itemTerreno.idTerreno')"><span class="fa fa-trash"></span> </button>&nbsp;
                                        <button class="btn btn-primary"
                                                data-idterreno="@itemTerreno.idTerreno"
                                                data-idcultivo="@itemTerreno.idCultivo"
                                                data-nombreterreno="@itemTerreno.nombreTerreno"
                                                data-descripcionterreno="@itemTerreno.descripcionTerreno"
                                                data-coordenadas="@itemTerreno.coordenadas"
                                                onclick="CargarDatosTerreno(this)">
                                            <span class="fa fa-pencil"></span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="6"><center>Aún no ha agregado terrenos</center></td></tr>
                        }

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>





<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Información del terreno</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <label>Nombre</label>
                        <input type="text" class="form-control" value="Terreno" />
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                        
                        <div class="col-md-6"><label>Cultivo</label><select class="form-control"><option>Seleccione...</option><option>Papa</option><option>Cebolla</option><option>Piña</option></select></div>
                        <div class="col-md-6"><button style="margin-top:25px" class="btn btn-primary">Agregar cultivo <span class="fa fa-plus"></span></button></div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div class="col-md-12"><table class="table table-hover"><thead><tr><th>Cultivo</th></tr></thead><tbody><tr><td><center>No hay cultivos agregados</center></td></tr></tbody></table></div>
                </div>
                    
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary">Guardar cambios</button>
            </div>
        </div>
    </div>
</div>

@if (ViewBag.respuesta != null && ViewBag.respuesta == Constantes.EstadoCorrecto)
{
    <script>
        swal({
            title: 'Correcto',
            text: "@ViewBag.mensaje",
            type: 'success',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Aceptar'
        });
    </script>
}
else if (ViewBag.respuesta != null && ViewBag.respuesta == Constantes.EstadoError)
{
    <script>
        swal({
            title: 'Error',
            text: "@ViewBag.mensaje",
            type: 'danger',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Aceptar'
            });
    </script>
}
<script>

    $('table').bootstrapTable({
        editable: true
    });
    var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        osmAttrib = '&copy; <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        osm = L.tileLayer(osmUrl, { maxZoom: 29, attribution: osmAttrib });
    var map = L.map('map').setView([9.842405, -83.9317569], 29),
        drawnItems = new L.FeatureGroup().addTo(map);

    L.tileLayer("http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}", {
        attribution: ''
    }).addTo(map);


    new LeafletToolbar.DrawToolbar({
        position: 'topleft'
    }).addTo(map);

    new LeafletToolbar.EditToolbar.Control({
        position: 'topleft'
    }).addTo(map, drawnItems);

    map.on('draw:created', function (evt) {
        var type = evt.layerType,
            layer = evt.layer;

        drawnItems.addLayer(layer);
    });

    L.control.layers({
        'osm': osm.addTo(map),
        "google": L.tileLayer('http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', {
            maxZoom: 29, attribution: 'google'
        })
    }, { 'drawlayer': drawnItems }, { position: 'topleft', collapsed: false }).addTo(map);


    map.on('draw:created', function (e) {

        var type = e.layerType,
            layer = e.layer;

        if (type === 'polygon') {

            var geojson = {};
            geojson['type'] = 'Feature';
            geojson['geometry'] = {};
            geojson['geometry']['type'] = "Polygon";


            coordinates = [];
            var coordenadas = "";
            latlngs = layer.getLatLngs();
            for (var i = 0; i < latlngs[0].length; i++) {
                coordinates.push([latlngs[0][i].lng, latlngs[0][i].lat])
                var orden = i + 1;
                coordenadas += '<coordenada><longitud>' + latlngs[0][i].lng + "</longitud><latitud>" + latlngs[0][i].lat + '</latitud><orden>' + orden + '</orden></coordenada>';
            }

            coordenadas = '<coordenadas>' + coordenadas + '</coordenadas>';

            geojson['geometry']['coordinates'] = [coordinates];

            
            $("#hdnActualizarCoordenadas").val(true);
            $("#hdnListaCoordenadas").val(coordenadas);
            $("#btnGuardar").removeAttr("disabled");
            $("#btnEditar").removeAttr("disabled");

        }

        drawnItems.addLayer(layer);
    });
    map.on('draw:deleted', function (e) {
        debugger;
        $("#hdnActualizarCoordenadas").val(true);
        $("#hdnListaCoordenadas").val("");
        $("#btnGuardar").attr("disabled");
        $("#btnEditar").attr("disabled", "disabled");
            
            
    });


    function EliminarTerreno() {
        var parametros = {
            idTerreno: $("#hdnIdTerreno").val()
        };
        $.ajax({
            dataType: "json",
            type: "POST",
            url: '@Url.Action("Eliminar", "Terreno")',
            data: parametros,
            success: function (data) {
                if (data.respuesta == '@Constantes.EstadoCorrecto')
                {
                    swal({
                        title: 'Correcto',
                        text: "El terreno se ha borrado correctamente",
                        type: 'success',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'Aceptar'
                    }).then(function (isConfirm) {
                        window.location.href = window.location.href;
                    });


                }
                else
                {
                    swal({
                        title: 'Error',
                        text: "Ocurrió un error al borrar el terreno",
                        type: 'success',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'danger'
                    }).then(function (isConfirm) {
                        window.location.href = window.location.href;
                    });
                }

            }
        });
    }

    function EliminarTerrenoPaso1(idTerreno)
    {
        swal({
            title: '',
            text: "Esta acción eliminará el terreno",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Borrar',
            cancelButtonText: 'Cancelar'
        }).then(function (isConfirm) {
            if (isConfirm)
            {
                $("#hdnIdTerreno").val(idTerreno);
                EliminarTerreno();
            }

        })
    }

    function CargarDatosTerreno(terreno)
    {
        
        var idTerreno = $(terreno).data("idterreno");
        var nombre = $(terreno).data("nombreterreno");
        var cultivo = $(terreno).data("idcultivo");
        var descripcion = $(terreno).data("descripcionterreno");
        var coordenadas = $(terreno).data("coordenadas");

        $("#txtNombreTerreno").val(nombre);
        $("#txtDescripcionTerreno").val(descripcion);
        $("#ddlCultivos").val(cultivo);
        $("#hdnListaCoordenadas").val(coordenadas);
        $("#hdnActualizarCoordenadas").val(false);
        $("#btnEditar").removeClass("hidden");
        $("#btnEditar").removeProp("disabled");
        $("#btnGuardar").addClass("hidden");
        $("#btnEditar").val(idTerreno);

        $("#divMantenimiento").removeClass("hidden");
        $("#divTablaTerrenos").addClass("hidden");
        $("#tituloMantenimiento").html("Editar terreno");
        map.invalidateSize(false);
        DeserealizarXML(coordenadas);

    }

    function Cancelar()
    {
        $("#txtNombreTerreno").val("");
        $("#txtDescripcionTerreno").val("");
        $("#ddlCultivos").val("");
        $("#txtCoordenadas").val("");
        $("#btnEditar").addClass("hidden");
        $("#btnGuardar").removeClass("hidden");
        $("#btnEditar").val("");

        $("#divMantenimiento").addClass("hidden");
        $("#divTablaTerrenos").removeClass("hidden");
        $("#tituloMantenimiento").html("Guardar terreno");
        
    }

    function MostrarDivMantenimiento()
    {
        clearMap();
        $("#divMantenimiento").removeClass("hidden");
        $("#divTablaEmpleados").addClass("hidden");
        $("#tituloMantenimiento").html("Agregar terreno");
        map.invalidateSize(false);

    }

    function OcultarDivMantenimiento()
    {
        clearMap();
        $("#divMantenimiento").removeClass("hidden");
        $("#divTablaTerreno").addClass("hidden");
    }

    function DeserealizarXML(contenido)
    {
        clearMap();
        var xmlDoc = $.parseXML(contenido),
            $xml = $(xmlDoc),
            $coordenadas = $xml.find("coordenada");
        var coor = [];
        if ($coordenadas.length > 0) {
            map.setView([$($coordenadas[0].childNodes[0]).html(), $($coordenadas[0].childNodes[1]).html()], 18);
            for (var i = 0; i < $coordenadas.length; i++) {
                coor.push([$($coordenadas[i].childNodes[0]).html(), $($coordenadas[i].childNodes[1]).html()]);
            }
            var polygon = L.polygon(coor);
            polygon.addTo(L.featureGroup().addTo(map));
            drawnItems.addLayer(polygon);
        }

    }

    function clearMap() {
        for (i in map._layers) {
            if (map._layers[i]._path != undefined) {
                try {
                    map.removeLayer(map._layers[i]);
                }
                catch (e) {
                    console.log("problem with " + e + map._layers[i]);
                }
            }
        }
    }

</script>
<style>
    #btnCancelar {
        margin-right: 10px;
    }

    .ui-datepicker {
        z-index: 10000 !important;
    }
</style>
